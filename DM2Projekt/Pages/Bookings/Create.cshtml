@page
@model DM2Projekt.Pages.Bookings.CreateModel

@{
    ViewData["Title"] = "Create Booking";
}

<h2 class="mb-4">Create New Booking</h2>

<form method="post">
    <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>

    <fieldset class="border p-3 mb-4">
        <legend class="w-auto px-2">Booking Info</legend>

        <div class="form-group">
            <label asp-for="Booking.GroupId"></label>
            <select asp-for="Booking.GroupId" class="form-control" asp-items="ViewBag.GroupId">
                <option disabled selected value="">-- Select Group --</option>
            </select>
        </div>

        <div class="form-group">
            <label asp-for="Booking.RoomId"></label>
            <select asp-for="Booking.RoomId" class="form-control" asp-items="ViewBag.RoomId" id="Booking_RoomId">
                <option disabled selected value="">-- Select Room --</option>
            </select>
        </div>

        <div class="form-group">
            <label asp-for="Booking.CreatedByUserId"></label>
            <select asp-for="Booking.CreatedByUserId" class="form-control" asp-items="ViewBag.CreatedByUserId">
                <option disabled selected value="">-- Select User --</option>
            </select>
        </div>

        <div class="form-group" id="SmartboardWrapper">
            <label asp-for="Booking.SmartboardId"></label>
            <select name="Booking.SmartboardId" class="form-control" id="SmartboardSelect" style="display: none;"></select>
            <small id="NoSmartboardMessage" class="form-text text-muted" style="display: none;">
                No smartboard is available for the selected room.
            </small>
        </div>
    </fieldset>

    <fieldset class="border p-3 mb-4">
        <legend class="w-auto px-2">Time Selection</legend>

        <div class="form-group">
            <label for="weekPicker">Week</label>
            <input type="week" id="weekPicker" class="form-control" />
        </div>

        <div class="form-group">
            <label for="dayOfWeek">Day</label>
            <select id="dayOfWeek" class="form-control">
                <option value="">-- Select Day --</option>
                <option value="1">Monday</option>
                <option value="2">Tuesday</option>
                <option value="3">Wednesday</option>
                <option value="4">Thursday</option>
                <option value="5">Friday</option>
            </select>
        </div>

        <div class="form-group">
            <label for="timeSlot">Available Time Slots</label>
            <select id="timeSlot" class="form-control" name="SelectedTimeSlot">
                <option value="">-- Select Room + Day --</option>
            </select>
        </div>
    </fieldset>

    <input type="hidden" asp-for="Booking.StartTime" />
    <input type="hidden" asp-for="Booking.EndTime" />

    <div class="form-group text-right">
        <input type="submit" value="Create Booking" class="btn btn-success" />
    </div>
</form>

<a asp-page="Index" class="btn btn-link">← Back to List</a>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const roomSelect = document.getElementById("Booking_RoomId");
            const smartboardSelect = document.getElementById("SmartboardSelect");
            const noSmartboardMsg = document.getElementById("NoSmartboardMessage");

            const weekPicker = document.getElementById("weekPicker");
            const dayOfWeekSelect = document.getElementById("dayOfWeek");
            const timeSlotSelect = document.getElementById("timeSlot");

            const startInput = document.getElementById("Booking_StartTime");
            const endInput = document.getElementById("Booking_EndTime");

            function getSelectedDate() {
                const week = weekPicker.value;
                const day = parseInt(dayOfWeekSelect.value);

                if (!week || isNaN(day)) return null;

                const [year, weekNum] = week.split("-W").map(Number);
                const janFirst = new Date(year, 0, 1);
                const daysOffset = ((janFirst.getDay() + 6) % 7);
                const monday = new Date(janFirst);
                monday.setDate(janFirst.getDate() - daysOffset + ((weekNum - 1) * 7) + 1);

                monday.setDate(monday.getDate() + (day - 1));
                return monday;
            }

            function updateSmartboardOptions(roomId) {
                smartboardSelect.style.display = 'none';
                noSmartboardMsg.style.display = 'none';
                smartboardSelect.innerHTML = '';

                fetch(`?handler=SmartboardsByRoom&roomId=${roomId}`)
                    .then(res => res.json())
                    .then(data => {
                        if (!data.length) {
                            noSmartboardMsg.style.display = 'block';
                            return;
                        }

                        smartboardSelect.style.display = 'block';
                        smartboardSelect.appendChild(new Option("-- I don't want a smartboard --", ""));

                        data.forEach(sb => {
                            smartboardSelect.appendChild(new Option(sb.display, sb.smartboardId));
                        });
                    });
            }

            function updateAvailableTimeSlots() {
                const roomId = roomSelect.value;
                const selectedDate = getSelectedDate();

                if (!roomId || !selectedDate) {
                    timeSlotSelect.innerHTML = '<option value="">-- Select Room + Day --</option>';
                    return;
                }

                const isoDate = selectedDate.toISOString().split("T")[0];

                fetch(`?handler=AvailableTimeSlots&roomId=${roomId}&date=${isoDate}`)
                    .then(res => res.json())
                    .then(data => {
                        timeSlotSelect.innerHTML = '';
                        if (!data.length) {
                            timeSlotSelect.innerHTML = '<option value="">No available slots</option>';
                            return;
                        }

                        data.forEach(slot => {
                            const option = new Option(`${slot.start} - ${slot.end}`, slot.value);
                            timeSlotSelect.appendChild(option);
                        });
                    });
            }

            function updateHiddenTimeInputs(selectedStart) {
                if (!selectedStart) return;

                const startDate = new Date(selectedStart);
                const endDate = new Date(startDate.getTime() + 2 * 60 * 60 * 1000);

                startInput.value = startDate.toISOString();
                endInput.value = endDate.toISOString();
            }

            // Event Listeners
            roomSelect.addEventListener("change", () => {
                updateSmartboardOptions(roomSelect.value);
                updateAvailableTimeSlots();
            });

            weekPicker.addEventListener("change", updateAvailableTimeSlots);
            dayOfWeekSelect.addEventListener("change", updateAvailableTimeSlots);

            timeSlotSelect.addEventListener("change", () => {
                updateHiddenTimeInputs(timeSlotSelect.value);
            });

            // Trigger pre-fill if editing or returning after validation error
            if (roomSelect.value) {
                roomSelect.dispatchEvent(new Event("change"));
            }
        });
    </script>
}
